name: publish signed mobile artifacts
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:
    inputs:
        versionNumber:
          description: 'version number'     
          required: true
          default: '0.1.1'
  
jobs:
  publish: 
    runs-on: macos-latest
    environment: Release
    name: iOS Build
    steps:
      - uses: actions/checkout@v2

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      # github docs for installing cert and provisioning profile
      
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.DISTRIBUTION_CERT_PW }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.DISTRIBUTION_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}         
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      - name: Determine build version number
        shell: bash
        run: |
          if [ -z "${GITHUB_REF/refs\/tags\/v/}" ]
          then
              echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV
          else
              echo "VERSION=${{github.event.inputs.versionNumber}}" >> $GITHUB_ENV
          fi
          echo "${VERSION} is our version number"
          
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version:  '${{env.DOTNETVERSION}}'

      - name: Install .NET MAUI
        shell: bash
        run: |
          dotnet nuget locals all --clear 
          dotnet workload install ios maui --source https://api.nuget.org/v3/index.json
    
      - name: Restore nuget packages
        run:  dotnet restore IfpaMaui.sln
        
        # https://docs.microsoft.com/en-us/dotnet/maui/ios/deployment/overview
      - name : Publish iOS App
        shell: bash
        run: |
          dotnet publish -f net7.0-ios -c Release -p:ArchiveOnBuild=true -p:Version=${VERSION} -p:ApplicationDisplayVersion=${VERSION} -p:ApplicationVersion=${{github.run_number}}

      - uses: actions/upload-artifact@v2
        with:
          name: artifacts-ios
          if-no-files-found: error
          path: |
            bin/Release/net7.0-ios/**/*.ipa
